from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime, timedelta
from aiogram import Bot
from db.supabase_client import supabase
import pytz

REMINDER_TEXT = "–í—Ä–µ–º—è –Ω–∞ –±–ª–∏–∑–æ—Å—Ç—å. –û–¥–Ω–∞ –∏–≥—Ä–∞ ‚Äî –º–Ω–æ–≥–æ –ª—é–±–≤–∏ üíõ"
TIMEZONE = pytz.timezone("Europe/Moscow")


def setup_reminder_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—Ä–µ–¥–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 18:40
    trigger = CronTrigger(day_of_week="wed,fri", hour=18, minute=40)

    @scheduler.scheduled_job(trigger)
    async def send_reminders():
        print("[REMINDER] –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")

        now = datetime.now(TIMEZONE)
        yesterday = now - timedelta(hours=24)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏–ª —Ñ–∏–ª—å—Ç—Ä—ã
        response = supabase.table("user_sessions").select("*").execute()
        users = response.data or []

        for user in users:
            user_id = user.get("user_id")
            last_seen = user.get("last_seen_at")
            has_filters = all([
                user.get("age"),
                user.get("time"),
                user.get("energy"),
                user.get("place")
            ])

            if not has_filters:
                continue

            # –ï—Å–ª–∏ never seen ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ–º
            if not last_seen:
                should_send = True
            else:
                try:
                    seen_at = datetime.fromisoformat(last_seen)
                    should_send = seen_at < yesterday
                except Exception:
                    should_send = True

            if should_send:
                try:
                    await bot.send_message(chat_id=user_id, text=REMINDER_TEXT)
                    # –û–±–Ω–æ–≤–ª—è–µ–º last_seen_at
                    supabase.table("user_sessions").update({
                        "last_seen_at":
                        now.isoformat()
                    }).eq("user_id", user_id).execute()
                    print(f"[REMINDER] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
                except Exception as e:
                    print(f"[REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

        print("[REMINDER] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_reminders_now(bot: Bot):
    print("[REMINDER] –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏")
    try:
        now = datetime.now(tz=ZoneInfo("Europe/Moscow"))
        print(f"[REMINDER] –°–µ–π—á–∞—Å {now}")

        response = supabase.table("user_sessions").select("*").execute()
        users = response.data or []

        count = 0
        for user in users:
            user_id = user.get("user_id")
            filters = {
                "age": user.get("age"),
                "time": user.get("time"),
                "energy": user.get("energy"),
                "place": user.get("place")
            }

            if not all(filters.values()):
                continue

            last_seen = user.get("last_seen_at")
            if last_seen:
                last_seen_dt = datetime.fromisoformat(last_seen)
                delta = now - last_seen_dt
                if delta.total_seconds() < 60 * 60 * 24:  # –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥
                    continue

            try:
                await bot.send_message(chat_id=user_id, text=REMINDER_TEXT)
                count += 1
            except Exception as e:
                print(f"[REMINDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
        print(f"[REMINDER] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
    except Exception as e:
        print(f"[REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
