from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.common import start_inline_keyboard
from db.supabase_client import supabase, ENERGY_MAP, TIME_MAP, PLACE_MAP
from utils.amplitude_logger import log_event
from handlers.user_state import user_data

router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
          user_id = message.from_user.id

          log_event(user_id=user_id,
                    event_name="start_bot",
                    event_properties={"source": "telegram"})

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
          response = supabase.table("user_filters").select("*").eq(
              "user_id", user_id).execute()
          filters = response.data[0] if response.data else None

          if filters:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                    time_label = TIME_MAP.get(filters["time"], filters["time"])
                    energy_label = ENERGY_MAP.get(filters["energy"],
                                                  filters["energy"])
                    place_label = PLACE_MAP.get(filters.get("location"),
                                                filters.get("location", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"))

                    text = (
                        "–ü—Ä–∏–≤–µ—Ç! ‚ú®\n\n"
                        "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
                        f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {filters['age']} –ª–µ—Ç\n"
                        f"‚è≥ –í—Ä–µ–º—è: {time_label}\n"
                        f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: {energy_label}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {place_label}\n\n"
                        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ?"
                    )

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –•–æ—á—É –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                                callback_data="start_onboarding")
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏",
                                callback_data="continue_with_filters")
                        ]
                    ])

                    await message.answer(text, reply_markup=keyboard)
          else:
                    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                    text = (
                        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç *–ë–ª–∏–∑–∫–∏–µ –ò–≥—Ä—ã*! ü§ó\n\n"
                        "–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–¥–µ–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –¥–µ—Ç—å–º–∏ —Ç–∞–∫, "
                        "—á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ —Ç–µ–ø–ª–æ, –≤–µ—Å–µ–ª–æ –∏ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–æ ‚ú®")

                    await message.answer(text,
                                         parse_mode="Markdown",
                                         reply_markup=start_inline_keyboard)
