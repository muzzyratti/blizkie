from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.onboarding import age_keyboard
from keyboards.common import start_inline_keyboard
from db.supabase_client import TIME_MAP, ENERGY_MAP, PLACE_MAP
from utils.amplitude_logger import log_event
from db.user_sessions import load_user_session
from handlers.user_state import user_data
from uuid import uuid4

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    session = load_user_session(user_id)
    if session:
        user_data[user_id] = {
            "age": session["age"],
            "time": session["time"],
            "energy": session["energy"],
            "place": session["place"],
            "session_id": session.get("session_id")
        }

    filters = user_data.get(user_id)

    log_event(user_id=user_id,
              event_name="start_bot",
              event_properties={"source": "telegram"})

    if filters:
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
        time_label = TIME_MAP.get(filters["time"], filters["time"])
        energy_label = ENERGY_MAP.get(filters["energy"], filters["energy"])
        place_label = PLACE_MAP.get(filters["place"], filters["place"])

        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–≤–æ–π –≤—ã–±–æ—Ä:\n\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {filters['age']} –ª–µ—Ç\n"
            f"‚è≥ –í—Ä–µ–º—è: {time_label}\n"
            f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: {energy_label}\n"
            f"üìç –ú–µ—Å—Ç–æ: {place_label}\n\n"
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ—é", callback_data="start_with_saved")],
                [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ", callback_data="start_onboarding")]
            ])
        await message.answer(text, reply_markup=keyboard)
    else:
        text = ("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç *–ë–ª–∏–∑–∫–∏–µ –ò–≥—Ä—ã*! ü§ó\n\n"
                "–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–¥–µ–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –¥–µ—Ç—å–º–∏ —Ç–∞–∫, "
                "—á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ —Ç–µ–ø–ª–æ, –≤–µ—Å–µ–ª–æ –∏ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–æ ‚ú®")
        await message.answer(text,
                             parse_mode="Markdown",
                             reply_markup=start_inline_keyboard)

@router.callback_query(F.data == "start_onboarding")
async def start_onboarding(callback: types.CallbackQuery):
    user_data[callback.from_user.id] = {"mode": "onboarding", "session_id": str(uuid4())}
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É?", reply_markup=age_keyboard)
    await callback.answer()

@router.callback_query(F.data == "start_with_saved")
async def start_with_saved(callback: types.CallbackQuery):
    from handlers.activities import show_next_activity
    await show_next_activity(callback)
