from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.common import start_inline_keyboard
from keyboards.onboarding import age_keyboard, time_keyboard, energy_keyboard, place_keyboard
from db.supabase_client import get_activity, supabase, ENERGY_MAP, TIME_MAP, PLACE_MAP
from utils.amplitude_logger import log_event, set_user_properties
from uuid import uuid4

router = Router()
user_data = {}


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    log_event(user_id=message.from_user.id,
              event_name="start_bot",
              event_properties={"source": "telegram"})

    text = ("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç *–ë–ª–∏–∑–∫–∏–µ –ò–≥—Ä—ã*! ü§ó\n\n"
            "–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–¥–µ–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –¥–µ—Ç—å–º–∏ —Ç–∞–∫, "
            "—á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ —Ç–µ–ø–ª–æ, –≤–µ—Å–µ–ª–æ –∏ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–æ ‚ú®")
    await message.answer(text,
                         parse_mode="Markdown",
                         reply_markup=start_inline_keyboard)


@router.callback_query(F.data == "start_onboarding")
async def start_onboarding(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id] = {"mode": "onboarding"}

    log_event(user_id, "onboarding_started")

    await callback.message.answer(
        "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É? (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–±–∏—Ä–∞–π—Ç–µ –º–ª–∞–¥—à–µ–≥–æ):",
        reply_markup=age_keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("age_"))
async def process_age(callback: types.CallbackQuery):
    age = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    user_data.setdefault(user_id, {})["age"] = age

    log_event(user_id, "set_age", {"age": age})
    set_user_properties(user_id, {"age": age})

    mode = user_data[user_id].get("mode")
    if mode == "onboarding":
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {age} –ª–µ—Ç.\n\n"
            "–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
            reply_markup=time_keyboard)
    elif mode == "update":
        await callback.message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
        await show_next_activity(callback)

    await callback.answer()


@router.callback_query(F.data.startswith("time_"))
async def process_time(callback: types.CallbackQuery):
    time_choice = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_data[user_id]["time"] = time_choice

    log_event(user_id, "set_time", {"time": time_choice})
    set_user_properties(user_id, {"time": time_choice})

    mode = user_data[user_id].get("mode")
    if mode == "onboarding":
        await callback.message.answer(
            "–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –∏–≥—Ä—É? (—á–µ—Å—Ç–Ω–æ üòå)",
            reply_markup=energy_keyboard)
    elif mode == "update":
        await callback.message.answer("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
        await show_next_activity(callback)
    await callback.answer()


@router.callback_query(F.data.startswith("energy_"))
async def process_energy(callback: types.CallbackQuery):
    energy_choice = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_data[user_id]["energy"] = energy_choice

    log_event(user_id, "set_energy", {"energy": energy_choice})
    set_user_properties(user_id, {"energy": energy_choice})

    mode = user_data[user_id].get("mode")
    if mode == "onboarding":
        await callback.message.answer("–ì–¥–µ –±—É–¥–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è?",
                                      reply_markup=place_keyboard)
    elif mode == "update":
        await callback.message.answer("–≠–Ω–µ—Ä–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
        await show_next_activity(callback)
    await callback.answer()


@router.callback_query(F.data.startswith("place_"))
async def process_place(callback: types.CallbackQuery):
    place_choice = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_data[user_id]["place"] = place_choice

    log_event(user_id, "set_place", {"place": place_choice})
    set_user_properties(user_id, {"place": place_choice})

    mode = user_data[user_id].get("mode")
    if mode == "onboarding":
        log_event(user_id, "onboarding_completed")
        await send_activity(callback)
    elif mode == "update":
        await callback.message.answer("–ú–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
        await show_next_activity(callback)
    await callback.answer()


async def send_activity(callback: types.CallbackQuery):
    filters = user_data[callback.from_user.id]
    activity = get_activity(age=int(filters["age"]),
                            time_required=TIME_MAP[filters["time"]],
                            energy=ENERGY_MAP[filters["energy"]],
                            location=PLACE_MAP[filters["place"]])

    if not activity:
        await callback.message.answer(
            "üòî –ù–µ—Ç –∏–¥–µ–π –¥–ª—è —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    text = (f"üé≤ *{activity['title']}*\n\n"
            f"{activity['short_description']}\n\n"
            f"üí° {' ‚Ä¢ '.join(activity['summary'] or [])}\n\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å",
                callback_data=f"activity_details:{activity['id']}")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é",
                                 callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Å–æ–≤–µ—Ç—ã",
                                 callback_data="update_filters")
        ]
    ])

    await callback.message.answer_photo(photo=activity["image_url"],
                                        caption=text,
                                        parse_mode="Markdown",
                                        reply_markup=keyboard)


@router.callback_query(F.data.startswith("activity_details:"))
async def show_activity_details(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    activity_id = int(callback.data.split(":")[1])

    response = supabase.table("activities").select("*").eq(
        "id", activity_id).execute()
    if not response.data:
        await callback.message.answer(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await callback.answer()
        return

    activity = response.data[0]

    fav_response = supabase.table("favorites") \
        .select("id") \
        .eq("user_id", user_id) \
        .eq("activity_id", activity_id) \
        .execute()

    is_favorite = len(fav_response.data) > 0

    summary = "\n".join([f"üí° {s}" for s in (activity['summary'] or [])])
    text = (
        f"üé≤ *{activity['title']}*\n\n"
        f"‚è±Ô∏è {activity['time_required']} ‚Ä¢ ‚ö°Ô∏è {activity['energy']} ‚Ä¢ üìç {activity['location']}\n\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}\n\n"
        f"{activity['full_description']}\n\n"
        f"{summary}")

    row1 = []
    if is_favorite:
        row1.append(
            InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö ‚úñÔ∏è",
                                 callback_data=f"remove_fav:{activity_id}"))
    else:
        row1.append(
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–∏–º—ã–µ ‚ù§Ô∏è",
                                 callback_data=f"favorite_add:{activity_id}"))

    row1.append(
        InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é",
                             callback_data="activity_next"))

    row2 = [
        InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Å–æ–≤–µ—Ç—ã",
                             callback_data="update_filters"),
        InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π üíå",
                             callback_data=f"share_activity:{activity_id}")
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])

    await callback.message.answer_photo(photo=activity["image_url"],
                                        caption=text,
                                        parse_mode="Markdown",
                                        reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "activity_next")
async def show_next_activity(callback: types.CallbackQuery):
    filters = user_data.get(callback.from_user.id)
    if not filters:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ: /start")
        await callback.answer()
        return

    activity = get_activity(age=int(filters["age"]),
                            time_required=TIME_MAP[filters["time"]],
                            energy=ENERGY_MAP[filters["energy"]],
                            location=PLACE_MAP[filters["place"]])

    if not activity:
        await callback.message.answer("üòî –ë–æ–ª—å—à–µ –∏–¥–µ–π –Ω–µ—Ç –¥–ª—è —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏–π.")
        await callback.answer()
        return

    text = (f"üé≤ *{activity['title']}*\n\n"
            f"{activity['short_description']}\n\n"
            f"üí° {' ‚Ä¢ '.join(activity['summary'] or [])}\n\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å",
                callback_data=f"activity_details:{activity['id']}")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é",
                                 callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Å–æ–≤–µ—Ç—ã",
                                 callback_data="update_filters")
        ]
    ])

    await callback.message.answer_photo(photo=activity["image_url"],
                                        caption=text,
                                        parse_mode="Markdown",
                                        reply_markup=keyboard)
    await callback.answer()
