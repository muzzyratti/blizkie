from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from db.supabase_client import get_activity, supabase, TIME_MAP, ENERGY_MAP, location_MAP
from utils.amplitude_logger import log_event
from .user_state import user_data
import os
from db.seen import get_next_activity_with_filters
from datetime import datetime

activities_router = Router()


def get_activity_by_id(activity_id: int):
    response = supabase.table("activities").select("*").eq(
        "id", activity_id).single().execute()
    return response.data


async def send_activity(callback: types.CallbackQuery):
    filters = user_data[callback.from_user.id]
    activity_id, was_reset = get_next_activity_with_filters(
        user_id=callback.from_user.id,
        age=int(filters["age"]),
        time=filters["time"],
        energy=filters["energy"],
        location=filters["location"])

    if activity_id is None:
        await callback.message.answer("üòî –ù–µ—Ç –∏–¥–µ–π –¥–ª—è —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return
    
    activity = get_activity_by_id(activity_id)

    if not activity:
        await callback.message.answer(
            "üòî –ù–µ—Ç –∏–¥–µ–π –¥–ª—è —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    text = (f"üé≤ *{activity['title']}*\n\n"
            f"{activity['short_description']}\n\n"
            f"üí° {' ‚Ä¢ '.join(activity['summary'] or [])}\n\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å",
                callback_data=f"activity_details:{activity['id']}")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é",
                                 callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                                 callback_data="update_filters")
        ]
    ])

    log_event(user_id=callback.from_user.id,
              event_name="show_activity_L0",
              event_properties={
                  "activity_id": activity["id"],
                  "age": filters["age"],
                  "time": filters["time"],
                  "energy": filters["energy"],
                  "location": filters["location"]
              },
              session_id=user_data.get(callback.from_user.id,
                                       {}).get("session_id"))

    await callback.message.answer_photo(photo=activity["image_url"],
                                        caption=text,
                                        parse_mode="Markdown",
                                        reply_markup=keyboard)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
    supabase.table("seen_activities").upsert({
        "user_id":
        callback.from_user.id,
        "activity_id":
        activity["id"],
        "age":
        filters["age"],
        "time":
        filters["time"],
        "energy":
        filters["energy"],
        "location":
        filters["location"],
        "seen_at":
        datetime.now().isoformat()
    }).execute()


@activities_router.callback_query(F.data.startswith("activity_details:"))
async def show_activity_details(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    activity_id = int(callback.data.split(":")[1])

    response = supabase.table("activities").select("*").eq("id", activity_id).execute()
    if not response.data:
        await callback.message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await callback.answer()
        return

    activity = response.data[0]

    fav_response = supabase.table("favorites") \
        .select("id") \
        .eq("user_id", user_id) \
        .eq("activity_id", activity_id) \
        .execute()

    is_favorite = len(fav_response.data) > 0

    summary = "\n".join([f"üí° {s}" for s in (activity.get("summary") or [])])

    caption = f"üé≤ *{activity['title']}*"
    text = (
        f"‚è±Ô∏è {activity['time_required']} ‚Ä¢ ‚ö°Ô∏è {activity['energy']} ‚Ä¢ üìç {activity['location']}\n\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}\n\n"
        f"{activity['full_description']}\n\n"
        f"{summary}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–∏–º—ã–µ ‚ù§Ô∏è"
                if not is_favorite else "–£–±—Ä–∞—Ç—å –∏–∑ –ª—é–±–∏–º—ã—Ö ‚úñÔ∏è",
                callback_data=f"{'favorite_add' if not is_favorite else 'remove_fav'}:{activity_id}"
            )
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é", callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="update_filters")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π üíå", callback_data=f"share_activity:{activity_id}")
        ]
    ])

    try:
        if len(caption) + len(text) <= 1024:
            await callback.message.answer_photo(
                photo=activity["image_url"],
                caption=f"{caption}\n\n{text}",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        else:
            await callback.message.answer_photo(
                photo=activity["image_url"],
                caption=caption[:1024],
                parse_mode="Markdown"
            )
            await callback.message.answer(
                text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–¥–µ—é.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:", e)

    log_event(user_id=callback.from_user.id,
              event_name="show_activity_L1",
              event_properties={
                  "activity_id": activity_id,
                  "age": activity.get("age_min"),
                  "time": activity.get("time_required"),
                  "energy": activity.get("energy"),
                  "location": activity.get("location")
              },
              session_id=user_data.get(callback.from_user.id, {}).get("session_id"))

    await callback.answer()


@activities_router.callback_query(F.data == "activity_next")
async def show_next_activity(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    filters = user_data.get(user_id)

    # ‚úÖ –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏ ‚Äî –¥–æ—Å—Ç–∞—ë–º –∏–∑ Supabase
    if not filters:
        response = supabase.table("user_filters").select("*").eq(
            "user_id", user_id).execute()
        if not response.data:
            await callback.message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ: /start")
            await callback.answer()
            return

        filters = response.data[0]
        user_data[user_id] = filters  # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    activity_id, was_reset = get_next_activity_with_filters(
        user_id=user_id,
        age=int(filters["age"]),
        time=filters["time"],
        energy=filters["energy"],
        location=filters["location"])

    if activity_id is None:
        await callback.message.answer("üòî –ù–µ—Ç –∏–¥–µ–π –¥–ª—è —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return
    
    activity = get_activity_by_id(activity_id)

    if not activity:
        await callback.message.answer("üòî –ë–æ–ª—å—à–µ –∏–¥–µ–π –Ω–µ—Ç –¥–ª—è —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏–π.")
        await callback.answer()
        return

    text = (f"üé≤ *{activity['title']}*\n\n"
            f"{activity['short_description']}\n\n"
            f"üí° {' ‚Ä¢ '.join(activity['summary'] or [])}\n\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å",
                callback_data=f"activity_details:{activity['id']}")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é",
                                 callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                                 callback_data="update_filters")
        ]
    ])

    # ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_event(user_id=user_id,
              event_name="show_activity_L0",
              event_properties={
                  "activity_id": activity["id"],
                  "age": filters["age"],
                  "time": filters["time"],
                  "energy": filters["energy"],
                  "location": filters["location"]
              },
              session_id=filters.get("session_id"))

    log_event(user_id=user_id,
              event_name="show_next_activity",
              event_properties={
                  "activity_id": activity["id"],
                  "age": filters["age"],
                  "time": filters["time"],
                  "energy": filters["energy"],
                  "location": filters["location"]
              },
              session_id=filters.get("session_id"))

    await callback.message.answer_photo(photo=activity["image_url"],
                                        caption=text,
                                        parse_mode="Markdown",
                                        reply_markup=keyboard)

    supabase.table("seen_activities").upsert({
        "user_id":
        user_id,
        "activity_id":
        activity["id"],
        "age":
        filters["age"],
        "time":
        filters["time"],
        "energy":
        filters["energy"],
        "location":
        filters["location"],
        "seen_at":
        datetime.now().isoformat()
    }).execute()

    await callback.answer()


@activities_router.message(Command("next"))
async def next_command_handler(message: types.Message):
    user_id = message.from_user.id
    filters = user_data.get(user_id)

    if not filters:
        response = supabase.table("user_filters").select("*").eq("user_id", user_id).execute()
        if not response.data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ: /start")
            return

        filters = response.data[0]
        user_data[user_id] = filters  # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å

    activity_id, was_reset = get_next_activity_with_filters(
        user_id=user_id,
        age=int(filters["age"]),
        time=filters["time"],
        energy=filters["energy"],
        location=filters["location"])

    if activity_id is None:
        await callback.message.answer("üòî –ù–µ—Ç –∏–¥–µ–π –¥–ª—è —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return
    
    activity = get_activity_by_id(activity_id)

    if not activity:
        await message.answer("üòî –ë–æ–ª—å—à–µ –∏–¥–µ–π –Ω–µ—Ç –¥–ª—è —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏–π.")
        return

    text = (f"üé≤ *{activity['title']}*\n\n"
            f"{activity['short_description']}\n\n"
            f"üí° {' ‚Ä¢ '.join(activity['summary'] or [])}\n\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity['materials'] or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å",
                callback_data=f"activity_details:{activity['id']}")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –µ—â–µ –∏–¥–µ—é",
                                 callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(text="–•–æ—á—É –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                                 callback_data="update_filters")
        ]
    ])

    await message.answer_photo(photo=activity["image_url"],
                               caption=text,
                               parse_mode="Markdown",
                               reply_markup=keyboard)

    supabase.table("seen_activities").upsert({
        "user_id":
        user_id,
        "activity_id":
        activity["id"],
        "age":
        filters["age"],
        "time":
        filters["time"],
        "energy":
        filters["energy"],
        "location":
        filters["location"],
        "seen_at":
        datetime.now().isoformat()
    }).execute()

    log_event(user_id=user_id,
              event_name="show_next_activity",
              event_properties={
                  "activity_id": activity["id"],
                  "age": filters["age"],
                  "time": filters["time"],
                  "energy": filters["energy"],
                  "location": filters["location"]
              },
              session_id=filters.get("session_id"))


@activities_router.message(Command("show_activity"))
async def show_activity_by_id(message: types.Message, command: CommandObject):
    admin_id = int(os.getenv("ADMIN_USER_ID"))
    if message.from_user.id != admin_id:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.")
        return

    activity_id_str = command.args
    if not activity_id_str or not activity_id_str.isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: /show_activity 87")
        return

    activity_id = int(activity_id_str)

    response = supabase.table("activities").select("*").eq(
        "id", activity_id).execute()
    if not response.data:
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")
        return

    activity = response.data[0]

    summary = "\n".join([f"üí° {s}" for s in (activity.get("summary") or [])])
    caption = f"üé≤ –ò–¥–µ—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è: *{activity['title']}*"
    full_text = (
        f"‚è±Ô∏è {activity.get('time_required', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} ‚Ä¢ "
        f"‚ö°Ô∏è {activity.get('energy', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚Ä¢ "
        f"üìç {activity.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {activity.get('materials') or '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}\n\n"
        f"{activity.get('full_description', '')}\n\n"
        f"{summary}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–∏–º—ã–µ ‚ù§Ô∏è",
                                 callback_data=f"favorite_add:{activity_id}"),
            InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë",
                                 callback_data="activity_next")
        ],
        [
            InlineKeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è üíå",
                callback_data=f"share_activity:{activity_id}"),
            InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                                 callback_data="update_filters")
        ]
    ])

    try:
        await message.answer_photo(photo=activity["image_url"],
                                   caption=caption[:1024],
                                   parse_mode="Markdown")
        await message.answer(full_text,
                             parse_mode="Markdown",
                             reply_markup=keyboard)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        print("–û—à–∏–±–∫–∞ –≤ show_activity_by_id:", e)

    try:
        log_event(user_id=message.from_user.id,
                  event_name="show_activity_by_id",
                  event_properties={
                      "activity_id": activity_id,
                      "age": activity.get("age_min"),
                      "time": activity.get("time_required"),
                      "energy": activity.get("energy"),
                      "location": activity.get("location")
                  },
                  session_id=user_data.get(message.from_user.id,
                                           {}).get("session_id"))
    except Exception as e:
        print(f"[Amplitude] Failed to log show_activity_by_id: {e}")
