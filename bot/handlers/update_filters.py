from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.user_state import user_data
from keyboards.onboarding import age_keyboard, time_keyboard, energy_keyboard, place_keyboard
from db.supabase_client import TIME_MAP, ENERGY_MAP, PLACE_MAP
from db.supabase_client import supabase

from utils.amplitude_logger import log_event

update_filters_router = Router()


@update_filters_router.message(Command("update_filters"))
@update_filters_router.callback_query(F.data == "update_filters")
async def show_update_options(event: types.Message | types.CallbackQuery):
    user_id = event.from_user.id
    filters = user_data.get(user_id)
    if not filters:
        # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ Supabase
        response = supabase.table("user_filters").select("*").eq(
            "user_id", user_id).execute()
        if not response.data:
            text = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–¥–±–æ—Ä: /start"
            if isinstance(event, types.CallbackQuery):
                await event.message.answer(text)
                await event.answer()
            else:
                await event.answer(text)
            return
        filters = response.data[0]
        user_data[user_id] = filters  # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å

    # ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    try:
        log_event(user_id=user_id,
                  event_name="update_filters",
                  event_properties={
                      "age": filters.get("age"),
                      "time": filters.get("time"),
                      "energy": filters.get("energy"),
                      "location": filters.get("location")
                  },
                  session_id=filters.get("session_id"))
    except Exception as e:
        print(f"[Amplitude] Failed to log update_filters: {e}")

    time_label = TIME_MAP.get(filters["time"], filters["time"])
    energy_label = ENERGY_MAP.get(filters["energy"], filters["energy"])
    place_label = PLACE_MAP.get(filters["location"], filters["location"])

    text = (f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:\n"
            f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {filters['age']} –ª–µ—Ç\n"
            f"‚è≥ –í—Ä–µ–º—è: {time_label}\n"
            f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: {energy_label}\n"
            f"üìç –ú–µ—Å—Ç–æ: {place_label}\n\n"
            f"–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å?")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç",
                                 callback_data="update_age")
        ],
                         [
                             InlineKeyboardButton(text="–í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É",
                                                  callback_data="update_time")
                         ],
                         [
                             InlineKeyboardButton(
                                 text="–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏",
                                 callback_data="update_energy")
                         ],
                         [
                             InlineKeyboardButton(text="–ú–µ—Å—Ç–æ",
                                                  callback_data="update_place")
                         ]])

    if isinstance(event, types.CallbackQuery):
        await event.message.answer(text, reply_markup=keyboard)
        await event.answer()
    else:
        await event.answer(text, reply_markup=keyboard)


@update_filters_router.callback_query(F.data == "update_age")
async def update_age(callback: types.CallbackQuery):
    user_data[callback.from_user.id]["mode"] = "update"
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
                                  reply_markup=age_keyboard)
    await callback.answer()


@update_filters_router.callback_query(F.data == "update_time")
async def update_time(callback: types.CallbackQuery):
    user_data[callback.from_user.id]["mode"] = "update"
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–≥—Ä—É?",
                                  reply_markup=time_keyboard)
    await callback.answer()


@update_filters_router.callback_query(F.data == "update_energy")
async def update_energy(callback: types.CallbackQuery):
    user_data[callback.from_user.id]["mode"] = "update"
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –∏–≥—Ä—É?",
                                  reply_markup=energy_keyboard)
    await callback.answer()


@update_filters_router.callback_query(F.data == "update_place")
async def update_place(callback: types.CallbackQuery):
    user_data[callback.from_user.id]["mode"] = "update"
    await callback.message.answer("–ì–¥–µ –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?",
                                  reply_markup=place_keyboard)
    await callback.answer()
