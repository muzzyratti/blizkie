from aiogram import Router, types, F
from keyboards.onboarding import age_keyboard, time_keyboard, energy_keyboard, place_keyboard
from utils.amplitude_logger import log_event, set_user_properties
from .user_state import user_data
from .activities import send_activity, show_next_activity

onboarding_router = Router()


@onboarding_router.callback_query(F.data == "start_onboarding")
async def start_onboarding(callback: types.CallbackQuery):
  user_id = callback.from_user.id
  user_data[user_id] = {"mode": "onboarding"}

  log_event(user_id, "onboarding_started")

  await callback.message.answer(
      "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É? (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–±–∏—Ä–∞–π—Ç–µ –º–ª–∞–¥—à–µ–≥–æ):",
      reply_markup=age_keyboard)
  await callback.answer()


@onboarding_router.callback_query(F.data.startswith("age_"))
async def process_age(callback: types.CallbackQuery):
  age = int(callback.data.split("_")[1])
  user_id = callback.from_user.id
  user_data.setdefault(user_id, {})["age"] = age

  log_event(user_id, "set_age", {"age": age})
  set_user_properties(user_id, {"age": age})

  mode = user_data[user_id].get("mode")
  if mode == "onboarding":
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {age} –ª–µ—Ç.\n\n"
        "–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
        reply_markup=time_keyboard)
  elif mode == "update":
    await callback.message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
    await show_next_activity(callback)

  await callback.answer()


@onboarding_router.callback_query(F.data.startswith("time_"))
async def process_time(callback: types.CallbackQuery):
  time_choice = callback.data.split("_")[1]
  user_id = callback.from_user.id
  user_data[user_id]["time"] = time_choice

  log_event(user_id, "set_time", {"time": time_choice})
  set_user_properties(user_id, {"time": time_choice})

  mode = user_data[user_id].get("mode")
  if mode == "onboarding":
    await callback.message.answer(
        "–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –∏–≥—Ä—É? (—á–µ—Å—Ç–Ω–æ üòå)",
        reply_markup=energy_keyboard)
  elif mode == "update":
    await callback.message.answer("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
    await show_next_activity(callback)
  await callback.answer()


@onboarding_router.callback_query(F.data.startswith("energy_"))
async def process_energy(callback: types.CallbackQuery):
  energy_choice = callback.data.split("_")[1]
  user_id = callback.from_user.id
  user_data[user_id]["energy"] = energy_choice

  log_event(user_id, "set_energy", {"energy": energy_choice})
  set_user_properties(user_id, {"energy": energy_choice})

  mode = user_data[user_id].get("mode")
  if mode == "onboarding":
    await callback.message.answer("–ì–¥–µ –±—É–¥–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è?",
                                  reply_markup=place_keyboard)
  elif mode == "update":
    await callback.message.answer("–≠–Ω–µ—Ä–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
    await show_next_activity(callback)
  await callback.answer()


@onboarding_router.callback_query(F.data.startswith("place_"))
async def process_place(callback: types.CallbackQuery):
  place_choice = callback.data.split("_")[1]
  user_id = callback.from_user.id
  user_data[user_id]["place"] = place_choice

  log_event(user_id, "set_place", {"place": place_choice})
  set_user_properties(user_id, {"place": place_choice})

  mode = user_data[user_id].get("mode")
  if mode == "onboarding":
    log_event(user_id, "onboarding_completed")
    await send_activity(callback)
  elif mode == "update":
    await callback.message.answer("–ú–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å üëá")
    await show_next_activity(callback)
  await callback.answer()
